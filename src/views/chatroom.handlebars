<style>
    #messages {
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    #message-input {}

    #messages>* {
        display: block;
        white-space: break-spaces;
    }

    #sendMessage {
        flex: 1;
    }

    .time {
        font-size: .75rem;
        color: var(--txt-alt);
        font-weight: 500;
    }

    .message.own-message p {
        background-color: var(--primary);
        color: white;

    }

    .message p {
        padding: .5rem;
        border-radius: 15px;
        background-color: var(--txt);
        color: var(--surface);
        /*max-width: 50%;*/
    }

    .message.own-message .time {}

    .message.own-message .time.own-time {}

    .message {
        align-self: flex-start;
    }

    .message.own-message {
        align-self: flex-end;
    }
</style>
<script src="/socket.io/socket.io.js"></script>

<div class="wrapper ">
    <div class="h-100vh p-md flex-v">
        <div class="flex align-center justify-between mb-md">
            <div class="font-lg"><a class="link underline" href="/chatroom/all">chatrooms</a> / {{chatroom.name}}</div>
            <img src="{{chatroom.img}}" alt="" height="48">
        </div>
        <div id="messages" class="mb-md h-100"></div>
        <form class="flex gap-md mt-auto">
            <input id="message-input" class="p-lg rounded-lg" type="text" autofocus>
            <button id="sendMessage" type="submit" class="flex-1 rounded-lg">Send</button>
        </form>
    </div>
</div>

<script>
    let socket = io('/?id=' + '{{chatroom._id}}');
    socket.emit('join', '{{chatroom._id}}');

    const messages = document.getElementById('messages');
    const messageInput = document.getElementById('message-input');
    const sendMessageBtn = document.getElementById('sendMessage');

    function createMessage(isOwnMessage, message) {
        let messageBubble = document.createElement('div');
        let messageElement = document.createElement('p');
        let timeElement = document.createElement('span');

        timeElement.classList.add('time');
        messageBubble.classList.add('message');

        timeElement.innerText = getCurrentTime();
        messageElement.innerText = message;

        messageBubble.appendChild(timeElement);
        messageBubble.appendChild(messageElement);

        if (isOwnMessage) {
            messageBubble.classList.add('own-message');
            timeElement.classList.add('own-time');
        }

        messages.appendChild(messageBubble);
        // scroll to the bottom of the messages
        messages.scrollTop = messages.scrollHeight;
    }

    function getCurrentTime() {
        let date = new Date();

        return date.toLocaleTimeString({ hour: '2-digit', minute: '2-digit' });
    }

    sendMessageBtn.addEventListener('click', (e) => {
        e.preventDefault();
        if (!messageInput.value) return;
        createMessage(true, messageInput.value);
        socket.emit('send-message', messageInput.value);
        messageInput.value = '';
        //messages.scrollTop = messages.scrollHeight;
    });


    socket.on('send-message', function (message) {
        createMessage(false, message);
    });


</script>